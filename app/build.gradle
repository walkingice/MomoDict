apply plugin: 'com.android.application'
apply plugin: 'realm-android'
apply plugin: "kotlin-android"
apply plugin: 'checkstyle'
apply plugin: 'findbugs'

check.dependsOn 'checkstyle'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"
    defaultConfig {
        applicationId "org.zeroxlab.momodict"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    ext.supportVersion = "25.2.0"
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:cardview-v7:$supportVersion"
    compile "com.android.support:recyclerview-v7:$supportVersion"
    compile "com.android.support:appcompat-v7:$supportVersion"
    compile "com.android.support:design:$supportVersion"

    // For license detection
    // https://github.com/mikepenz/AboutLibraries
    compile('com.mikepenz:aboutlibraries:5.9.4@aar') {
        transitive = true
    }

    // to install apache library
    compile 'org.apache.commons:commons-compress:1.13'
    compile group: 'commons-io', name: 'commons-io', version: '2.4'

    // use rx
    compile 'io.reactivex:rxandroid:1.2.1'
    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    compile 'io.reactivex:rxjava:1.1.6'

    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'

    testCompile "org.robolectric:robolectric:3.3.1"
    testCompile "org.mockito:mockito-core:2.7.19"
}

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/quality/square_picasso_checkstyle.xml")
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    classpath = files()
}

task findbugs(type: FindBugs) {
    source 'src'          // Specify the source code. The script should be applied to
    include '**/*.java'   // the module build.gradle so the 'src' folder resides at the same level
    exclude '**/gen/**'   // include / exclude folders and files.

    //Higher levels increase precision and find more bugs at the expense of running time and memory consumption.
    effort = 'max'
    //The priority threshold for reporting bugs. If set to {@code low}, all bugs are reported.
    reportLevel = 'low'

    excludeFilter = new File("${project.rootDir}/quality/findbugs_exclude.xml")

    classes = files("${project.rootDir}/app/build/intermediates/classes")
    classpath = files()
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

repositories {
    mavenCentral()
}
